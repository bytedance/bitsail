import{_ as l}from"./release_procedure.a12f0fbe.js";import{_ as d}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c,a,d as i,w as o,b as e,e as h,r as s}from"./app.419631c0.js";const p={},u=a("h1",{id:"bitsail-发版指南",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#bitsail-发版指南","aria-hidden":"true"},"#"),e(" BitSail 发版指南")],-1),m=h(`<hr><h2 id="提交-pull-request-的流程" tabindex="-1"><a class="header-anchor" href="#提交-pull-request-的流程" aria-hidden="true">#</a> 提交 pull request 的流程</h2><p>提交一个新的 commit 的标准程序</p><ol><li>创建一个新的Github issue或者关联一个已经存在的 issue</li><li>在issue description中描述你想要进行的工作.</li><li>在commit message关联你的issue，格式如下：</li></ol><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>[BitSail#\${IssueNumber}][\${Module}] Description
[BitSail#1234][Connector] Improve reader split algorithm to Kudu source connector

//For Minor change
[Minor] Description
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>commit message的module格式列表如下，如果开发者的工作关联了多个module，选择最相关的module即可，例如：如果你在 kafka connector添加了新的feature，并且改变了common、components和cores中的代码，这时commit message应该绑定的module格式为[Connector]。</li></ol><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>[Common] bitsail-common
[Core] base client component cores
[Connector] all connector related changes
[Doc] documentation or java doc changes
[Build] build, dependency changes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="release-流程" tabindex="-1"><a class="header-anchor" href="#release-流程" aria-hidden="true">#</a> release 流程</h2><p><img src="`+l+'" alt="img" loading="lazy"></p><h3 id="_1-release-决议阶段" tabindex="-1"><a class="header-anchor" href="#_1-release-决议阶段" aria-hidden="true">#</a> 1. release 决议阶段</h3><p>因为目前的订阅mailing list的用户不多，使用 Github issue 来讨论release相关的话题应该会有更好的可见性。</p><p>我们可以在 Github 上开始一个新的讨论，主题如下</p><p><code>0.1.0</code> 发布讨论</p><p>决定发布和选择Release Manager是发布过程的第一步。 这是整个社区基于共识的决定。</p><p>任何人都可以在 Github issue上提议一个release，给出可靠的论据并提名一名committer作为Release Manager （包括他们自己）。 没有正式的流程，没有投票要求，也没有时间要求。 任何异议都应在开始发布之前以协商的方式解决。</p><h3 id="_2-relase-准备阶段" tabindex="-1"><a class="header-anchor" href="#_2-relase-准备阶段" aria-hidden="true">#</a> 2. relase 准备阶段</h3><p>A. 审理 release-blocking issues</p><p>B. 审查和更新文件</p><p>C. 跨团队测试</p><p>D. 查看发行说明</p><p>E. 验证构建和测试</p><p>F. 创建发布分支</p><p>G. 修改master的版本</p><h3 id="_3-release-candidate-构建阶段" tabindex="-1"><a class="header-anchor" href="#_3-release-candidate-构建阶段" aria-hidden="true">#</a> 3. release candidate 构建阶段</h3><p>由于我们暂时没有maven central access，我们将在github上构建一个release candidate，让其他用户测试。</p><p>A. 添加 git release 标签</p><p>B. 发布在Github上供公众下载</p><h3 id="_4-release-candidate-投票阶段" tabindex="-1"><a class="header-anchor" href="#_4-release-candidate-投票阶段" aria-hidden="true">#</a> 4. release candidate 投票阶段</h3><p>一旦release分支和release candidate准备就绪，release manager将要求其他committers测试release candidate并开始对相应的 Github Issue 进行投票。 我们至少需要 3 个来自 PMC 成员的盲选票。</p><h3 id="_5-问题修复阶段" tabindex="-1"><a class="header-anchor" href="#_5-问题修复阶段" aria-hidden="true">#</a> 5. 问题修复阶段</h3><p>社区审查和投票期间发现的任何问题都应在此步骤中解决。</p><p>代码更改应该以标准pull requests的方式提交给 master 分支，并使用标准的贡献流程进行审查。 之后将相关更改同步到发布分支中。 使用 cherry-pick 命令将这些代码更改的commits应用于release分支，再次使用标准的贡献过程进行代码审查和合并。</p><p>解决所有问题后，将更改构建新的release candidate。</p><h3 id="_6-release-结束阶段" tabindex="-1"><a class="header-anchor" href="#_6-release-结束阶段" aria-hidden="true">#</a> 6. release 结束阶段</h3><p>一旦release candidate通过投票，我们就可以最终确定release。</p><p>A. 将release分支版本从 <code>x.x.x-rc1</code> 更改为 <code>x.x.x</code>。 例如 <code>0.1.0-rc1</code> 到 <code>0.1.0</code></p><p>B. <code>git commit -am “[MINOR] 更新release版本以反映release版本 ${RELEASE_VERSION}”</code></p><p>C.推送到release分支</p><p>D. 解决相关Github issue</p><p>E. 创建一个新的 Github release，去掉之前推送的 release version 标签</p><h3 id="_7-release-发布阶段" tabindex="-1"><a class="header-anchor" href="#_7-release-发布阶段" aria-hidden="true">#</a> 7. release 发布阶段</h3><p>在我们发布release后的 24 小时内，会在所有社区渠道上推广该版本，包括微信、飞书、mailing list。</p><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考:</h3>',43),_={href:"https://cwiki.apache.org/confluence/display/FLINK/Creating+a+Flink+Release",target:"_blank",rel:"noopener noreferrer"},b={href:"https://cwiki.apache.org/confluence/display/HUDI/Apache+Hudi+-+Release+Guide",target:"_blank",rel:"noopener noreferrer"};function g(v,f){const n=s("RouterLink"),r=s("ExternalLinkIcon");return t(),c("div",null,[u,a("p",null,[i(n,{to:"/en/community/release_guide.html"},{default:o(()=>[e("English")]),_:1}),e(" | 简体中文")]),m,a("p",null,[e("Flink release 指南: "),a("a",_,[e("Creating a Flink Release"),i(r)])]),a("p",null,[e("Hudi release 指南: "),a("a",b,[e("Apache Hudi Release Guide"),i(r)])])])}const G=d(p,[["render",g],["__file","release_guide.html.vue"]]);export{G as default};
