import{_ as r}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as l,c as p,a,b as e,d as n,w as c,e as t,r as i}from"./app.416da474.js";const d={},u=a("h1",{id:"deployment-guide",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#deployment-guide","aria-hidden":"true"},"#"),e(" Deployment Guide")],-1),m=t('<hr><blockquote><p>At present, <em><strong>BitSail</strong></em> supports flink deployment on Yarn and native Kubernetes.<br></p></blockquote><p>Here are the contents of this part:</p><ul><li><a href="#yarn_deployment">Yarn Deployment</a><ul><li><a href="#jump_pre_configure">Pre Configuration</a><ul><li><a href="#jump_configure_hadoop">Configure Hadoop Environment</a></li><li><a href="#jump_configure_flink">Configure Flink Cluster</a></li></ul></li><li><a href="#jump_submit_to_yarn">Submit to Yarn</a><ul><li><a href="#jump_submit_example">Submit an example job</a></li><li><a href="#jump_log">Log for Debugging</a></li></ul></li><li><a href="#jump_submit_local">Submit to Local Flink Session</a><ul><li><a href="#jump_flink_remote">Run in Remote Flink Session</a></li><li><a href="#jump_flink_local">Run Locally</a></li></ul></li></ul></li><li><a href="#native_kubernetes_deployment">Native Kubernetes Deployment</a><ul><li><a href="#jump_prerequisites_k8s">Prerequisites</a></li><li><a href="#jump_pre_configuration_k8s">Pre Configuration</a><ul><li><a href="#jump_configure_RBAC">Setup RBAC</a></li></ul></li><li><a href="#jump_application_mode">Application Mode</a><ul><li><a href="#jump_build_custom_flink_image">Build Custom Flink Image</a></li><li><a href="#jump_start_application">Start Application</a></li><li><a href="#jump_stop_application">Stop Application</a></li><li><a href="#jump_kubernetes_logs">Kubernetes Logs</a></li><li><a href="#jump_history_server">History Server</a></li></ul></li></ul></li></ul><hr><h1 id="yarn-deployment" tabindex="-1"><a class="header-anchor" href="#yarn-deployment" aria-hidden="true">#</a> <span id="yarn_deployment">Yarn Deployment</span></h1><p>Below is a step-by-step guide to help you effectively deploy it on Yarn.</p><h2 id="pre-configuration" tabindex="-1"><a class="header-anchor" href="#pre-configuration" aria-hidden="true">#</a> <span id="jump_pre_configure">Pre configuration</span></h2><h3 id="configure-hadoop-environment" tabindex="-1"><a class="header-anchor" href="#configure-hadoop-environment" aria-hidden="true">#</a> <span id="jump_configure_hadoop">Configure Hadoop Environment</span></h3><p>To support Yarn deployment, <code>HADOOP_CLASSPATH</code> has to be set in system environment properties. There are two ways to set this environment property:</p>',10),b=a("li",null,[a("p",null,[e("Set "),a("code",null,"HADOOP_CLASSPATH"),e(" directly.")])],-1),h=a("code",null,"HADOOP_HOME",-1),k={href:"https://github.com/bytedance/bitsail/blob/master/bitsail-dist/src/main/archive/bin/bitsail",target:"_blank",rel:"noopener noreferrer"},v=a("code",null,"HADOOP_CLASSPATH",-1),g=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;<span class="token variable">$HADOOP_HOME</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_CLASSPATH</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>$HADOOP_HOME/bin/hadoop classpath<span class="token variable">)</span></span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="configure-flink-cluster" tabindex="-1"><a class="header-anchor" href="#configure-flink-cluster" aria-hidden="true">#</a> <span id="jump_configure_flink">Configure Flink Cluster</span></h3>`,2),f={href:"https://github.com/bytedance/bitsail/blob/master/bitsail-dist/src/main/resources/bitsail.conf",target:"_blank",rel:"noopener noreferrer"},_=t('<p>Here are some frequently-used options in the configuration file:</p><table><tr><th>Prefix</th><th>Parameter name</th><th>Description</th><th>Example</th></tr><tr><td rowspan="3">sys.flink.</td><td>flink_home</td><td>The root dir of flink.</td><td>${BITSAIL_HOME}/embedded/flink</td></tr><tr><td>checkpoint_dir</td><td>The path storing the meta data file and data files of checkpoints.<br>Reference: <a href="https://nightlies.apache.org/flink/flink-docs-master/docs/ops/state/checkpoints/">Flink Checkpoints</a></td><td>&quot;hdfs://opensource/bitsail/flink-1.11/checkpoints/&quot;</td></tr><tr><td>flink_default_properties</td><td>General flink runtime options configued by &quot;-D&quot;.</td><td>{<br> classloader.resolve-order: &quot;child-first&quot;<br> akka.framesize: &quot;838860800b&quot;<br> rest.client.max-content-length: 838860800<br> rest.server.max-content-len<br>} </td></tr></table><hr><h2 id="submit-to-yarn" tabindex="-1"><a class="header-anchor" href="#submit-to-yarn" aria-hidden="true">#</a> <span id="jump_submit_to_yarn">Submit to Yarn</span></h2><p>You can use the startup script <code>bin/bitsail</code> to submit flink jobs to yarn.</p><p>The specific commands are as follows:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">bash</span> ./bin/bitsail run <span class="token parameter variable">--engine</span> flink <span class="token parameter variable">--conf</span> <span class="token punctuation">[</span>job_conf_path<span class="token punctuation">]</span> --execution-mode run <span class="token parameter variable">--queue</span> <span class="token punctuation">[</span>queue_name<span class="token punctuation">]</span> --deployment-mode yarn-per-job <span class="token punctuation">[</span>--priority <span class="token punctuation">[</span>yarn_priority<span class="token punctuation">]</span> -p/--props <span class="token punctuation">[</span>name<span class="token operator">=</span>value<span class="token punctuation">]</span><span class="token punctuation">]</span> \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Parameter description</p><ul><li>Required parameters <ul><li><strong>queue_name</strong>: Target yarn queue</li><li><strong>job_conf_path</strong>: Path of job configuration file</li></ul></li><li>Optional parameters <ul><li><strong>yarn_priority</strong>: Job priority on yarn</li><li><strong>name=value</strong>: Flink properties, for example <code>classloader.resolve-order=child-first</code><ul><li><strong>name</strong>: Property key. Configurable flink parameters that will be transparently transmitted to the flink task.</li><li><strong>value</strong>: Property value.</li></ul></li></ul></li></ul><h3 id="submit-an-example-job" tabindex="-1"><a class="header-anchor" href="#submit-an-example-job" aria-hidden="true">#</a> <span id="jump_submit_example">Submit an example job</span></h3><p>Submit a fake source to print sink test to yarn.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">bash</span> ./bin/bitsail run <span class="token parameter variable">--engine</span> flink <span class="token parameter variable">--conf</span> ~/bitsail-archive-0.2.0-SNAPSHOT/examples/Fake_Print_Example.json --execution-mode run <span class="token parameter variable">-p</span> <span class="token assign-left variable">1</span><span class="token operator">=</span><span class="token number">1</span>  --deployment-mode yarn-per-job  <span class="token parameter variable">--queue</span> default\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="log-for-debugging" tabindex="-1"><a class="header-anchor" href="#log-for-debugging" aria-hidden="true">#</a> <span id="jump_log">Log for Debugging</span></h3><h4 id="client-side-log-file" tabindex="-1"><a class="header-anchor" href="#client-side-log-file" aria-hidden="true">#</a> Client side log file</h4><p>Please check <code>${FLINK_HOME}/log/</code> folder to read the log file of BitSail client.</p><h4 id="yarn-task-log-file" tabindex="-1"><a class="header-anchor" href="#yarn-task-log-file" aria-hidden="true">#</a> Yarn task log file</h4><p>Please go to Yarn WebUI to check the logs of Flink JobManager and TaskManager.</p><hr><h2 id="submit-to-flink" tabindex="-1"><a class="header-anchor" href="#submit-to-flink" aria-hidden="true">#</a> Submit to Flink</h2><p>Suppose that BitSail install path is: <code>${BITSAIL_HOME}</code>.</p><p>After building BitSail, we can enter the following path and find runnable jars and example job configuration files:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> <span class="token variable">${BITSAIL_HOME}</span>/bitsail-dist/target/bitsail-dist-0.2.0-SNAPSHOT-bin/bitsail-archive-0.2.0-SNAPSHOT/\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="run-in-remote-flink-session" tabindex="-1"><a class="header-anchor" href="#run-in-remote-flink-session" aria-hidden="true">#</a> <span id="jump_flink_remote">Run in Remote Flink Session</span></h3>',23),y=a("code",null,"--deployment-mode remote",-1),x={href:"https://github.com/bytedance/bitsail/blob/master/bitsail-dist/src/main/archive/examples/Fake_Print_Example.json",target:"_blank",rel:"noopener noreferrer"},j=t(`<ul><li><code>&lt;job-manager-address&gt;</code>: the address of job manager, should be host:port, <em>e.g.</em> <code>localhost:8081</code>.</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">bash</span> bin/bitsail run <span class="token punctuation">\\</span>
  <span class="token parameter variable">--engine</span> flink <span class="token punctuation">\\</span>
  --execution-mode run <span class="token punctuation">\\</span>
  --deployment-mode remote <span class="token punctuation">\\</span>
  <span class="token parameter variable">--conf</span> examples/Fake_Print_Example.json <span class="token punctuation">\\</span>
  --jm-address <span class="token operator">&lt;</span>job-manager-address<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For example, we can use the script <code>bitsail-archive-0.1.0-SNAPSHOT/embedded/flink/bin/start-cluster.sh</code> to start a standalone session. Then we can run the example with following commands:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">bash</span> bin/bitsail run <span class="token punctuation">\\</span>
  <span class="token parameter variable">--engine</span> flink <span class="token punctuation">\\</span>
  --execution-mode run <span class="token punctuation">\\</span>
  --deployment-mode remote <span class="token punctuation">\\</span>
  <span class="token parameter variable">--conf</span> examples/Fake_Print_Example.json <span class="token punctuation">\\</span>
  --jm-address localhost:8081
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then you can visit Flink WebUI to see the running job. In task manager, we can see the output of the Fake_to_Print job in its stdout.</p><h3 id="run-in-local-mini-cluster" tabindex="-1"><a class="header-anchor" href="#run-in-local-mini-cluster" aria-hidden="true">#</a> <span id="jump_flink_local">Run in Local Mini-Cluster</span></h3>`,6),S=a("code",null,"--deployment-mode local",-1),w={href:"https://github.com/bytedance/bitsail/blob/master/bitsail-dist/src/main/archive/examples/Fake_Print_Example.json",target:"_blank",rel:"noopener noreferrer"},A=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">bash</span> bin/bitsail run <span class="token punctuation">\\</span>
  <span class="token parameter variable">--engine</span> flink <span class="token punctuation">\\</span>
  --execution-mode run <span class="token punctuation">\\</span>
  --deployment-mode <span class="token builtin class-name">local</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">--conf</span> examples/Fake_Print_Example.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="run-fake-to-print-example" tabindex="-1"><a class="header-anchor" href="#run-fake-to-print-example" aria-hidden="true">#</a> Run Fake_to_Print example</h4>`,2),T={href:"https://github.com/bytedance/bitsail/blob/master/bitsail-dist/src/main/archive/examples/Fake_Hive_Example.json",target:"_blank",rel:"noopener noreferrer"},P=t(`<ul><li>Remember fulfilling the job configuration with an available hive source before run the command: <ul><li><code>job.writer.db_name</code>: the hive database to write.</li><li><code>job.writer.table_name</code>: the hive table to write.</li><li><code>job.writer.metastore_properties</code>: add hive metastore address to it, like:</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>   <span class="token punctuation">{</span>
      <span class="token string">&quot;job&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;writer&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
          <span class="token string">&quot;metastore_properties&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;{<span class="token entity" title="\\&quot;">\\&quot;</span>hive.metastore.uris<span class="token entity" title="\\&quot;">\\&quot;</span>:<span class="token entity" title="\\&quot;">\\&quot;</span>thrift://localhost:9083<span class="token entity" title="\\&quot;">\\&quot;</span>}&quot;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>Then you can use the similar command to submit a BitSail job to specified Flink session:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">bash</span> bin/bitsail run <span class="token punctuation">\\</span>
  <span class="token parameter variable">--engine</span> flink <span class="token punctuation">\\</span>
  --execution-mode run <span class="token punctuation">\\</span>
  --deployment-mode <span class="token builtin class-name">local</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">--conf</span> examples/Fake_Hive_Example.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="run-hadoop-related-job" tabindex="-1"><a class="header-anchor" href="#run-hadoop-related-job" aria-hidden="true">#</a> Run hadoop related job</h4><p>When any of the reader or writer data source is relate to hadoop, <em>e.g.</em>, <code>hive_to_print</code> job, the hadoop libs are needed. There are two ways to offer hadoop libs for local minicluster:</p><ol><li>If you already have local hadoop environment, then you can directly set <code>$HADOOP_HOME</code> to the folder of your hadoop libs. For example:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_HOME</span><span class="token operator">=</span>/usr/local/hadoop-3.1.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>If there is no hadoop environment, you can use <code>flink-shaded-hadoop</code>. Remember moving the uber jar to your flink lib dir. For example, suppose the flink root dir is <code>/opt/flink</code>:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># download flink-shaded-hadoop-uber jar</span>
<span class="token function">wget</span> https://repo.maven.apache.org/maven2/org/apache/flink/flink-shaded-hadoop-2-uber/2.7.5-10.0/flink-shaded-hadoop-2-uber-2.7.5-10.0.jar

<span class="token comment"># move to flink libs</span>
<span class="token function">mv</span> flink-shaded-hadoop-2-uber-2.7.5-10.0.jar /opt/flink/lib/flink-shaded-hadoop-uber.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="native-kubernetes-deployment" tabindex="-1"><a class="header-anchor" href="#native-kubernetes-deployment" aria-hidden="true">#</a> <span id="native_kubernetes_deployment">Native Kubernetes Deployment</span></h1><blockquote><p>At present, <em><strong>BitSail</strong></em> supports native Kubernetes via Flink 1.11 engine.<br></p></blockquote><p>Below is a step-by-step guide to help you effectively deploy it on native Kubernetes. Currently, BitSail support Application deployment mode: Allows users to create a single image containing their Job and the Flink runtime, which will automatically create and destroy cluster components as needed.</p><h2 id="prerequisites" tabindex="-1"><a class="header-anchor" href="#prerequisites" aria-hidden="true">#</a> <span id="jump_prerequisites_k8s">Prerequisites</span></h2><ol><li>Kubernetes &gt;= 1.9</li><li>KubeConfig, which has access to list, create, delete pods and services, configurable via <code>~/.kube/config</code>. You can verify permissions by running <code>kubectl auth can-i &lt;list|create|edit|delete&gt; pods</code></li><li>Kubernetes DNS enabled</li><li>Have compiled BitSail ready (After building with <code>\${BITSAIL_HOME}/build.sh</code>, the artifacts will be located in <code>\${BITSAIL_HOME}/output/</code>)</li></ol>`,15),q={href:"https://kubernetes.io/docs/setup/",target:"_blank",rel:"noopener noreferrer"},I=t('<h2 id="pre-configuration-1" tabindex="-1"><a class="header-anchor" href="#pre-configuration-1" aria-hidden="true">#</a> <span id="jump_pre_configuration_k8s">Pre Configuration</span></h2><h3 id="setup-rbac" tabindex="-1"><a class="header-anchor" href="#setup-rbac" aria-hidden="true">#</a> <span id="jump_configure_RBAC">Setup RBAC</span></h3>',2),O={href:"https://kubernetes.io/docs/reference/access-authn-authz/rbac/",target:"_blank",rel:"noopener noreferrer"},H=t(`<p>Every namespace has a default service account. However, the <code>default</code> service account may not have the permission to create or delete pods within the Kubernetes cluster. Users can instead use the following command to create a new service account <code>&lt;self-defined-service-account&gt;</code> and set the role binding. Then use the config option <code>kubernetes.service-account=&lt;self-defined-service-account&gt;</code> to make the JobManager pod use the <code>&lt;self-defined-service-account&gt;</code> service account to create/delete TaskManager pods and leader ConfigMaps. Also this will allow the TaskManager to watch leader ConfigMaps to retrieve the address of JobManager and ResourceManager.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ kubectl create serviceaccount <span class="token operator">&lt;</span>self-defined-service-account<span class="token operator">&gt;</span> <span class="token comment"># Please replace &lt;self-defined-service-account&gt; with a custom name</span>
$ kubectl create clusterrolebinding <span class="token operator">&lt;</span>self-defined-cluster-role-binding<span class="token operator">&gt;</span> <span class="token parameter variable">--clusterrole</span><span class="token operator">=</span>edit <span class="token parameter variable">--serviceaccount</span><span class="token operator">=</span>default:<span class="token operator">&lt;</span>self-defined-service-account<span class="token operator">&gt;</span> <span class="token comment"># Please replace &lt;self-defined-service-account&gt; and &lt;self-defined-cluster-role-binding&gt; with custom names</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="application-mode" tabindex="-1"><a class="header-anchor" href="#application-mode" aria-hidden="true">#</a> <span id="jump_application_mode"> Application Mode</span></h2>`,3),F={href:"https://nightlies.apache.org/flink/flink-docs-release-1.11/ops/deployment/docker.html#customize-flink-image",target:"_blank",rel:"noopener noreferrer"},E=a("h3",{id:"build-custom-flink-image-first-time-or-per-bitsail-jar-executable-update",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#build-custom-flink-image-first-time-or-per-bitsail-jar-executable-update","aria-hidden":"true"},"#"),e(),a("span",{id:"jump_build_custom_flink_image"},"Build Custom Flink Image [First Time or Per BitSail JAR Executable Update]")],-1),M=a("code",null,"<CustomImage>",-1),B={href:"https://docs.docker.com/engine/reference/builder/",target:"_blank",rel:"noopener noreferrer"},C=a("code",null,"Dockerfile",-1),L=a("code",null,"${BITSAIL_HOME}/output/Dockerfile",-1),R=a("p",null,[e("Publish your "),a("code",null,"<CustomImage>"),e(" onto Dockerhub so that Kubernetes cluster can download:")],-1),D={href:"https://docs.docker.com/docker-hub/repos/#:~:text=To%20push%20an%20image%20to,docs%2Fbase%3Atesting%20",target:"_blank",rel:"noopener noreferrer"},N=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> <span class="token operator">&lt;</span>your <span class="token function">docker</span> repository<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>tag<span class="token operator">&gt;</span>
<span class="token function">docker</span> push <span class="token operator">&lt;</span>your <span class="token function">docker</span> repository<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>tag<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="start-application" tabindex="-1"><a class="header-anchor" href="#start-application" aria-hidden="true">#</a> <span id="jump_start_application">Start Application</span></h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">bash</span> <span class="token variable">\${BITSAIL_HOME}</span>/bin/bitsail run <span class="token punctuation">\\</span>
   <span class="token parameter variable">--engine</span> flink <span class="token punctuation">\\</span>
   <span class="token parameter variable">--target</span> kubernetes-application <span class="token punctuation">\\</span>
   --deployment-mode kubernetes-application <span class="token punctuation">\\</span>
   --execution-mode run-application <span class="token punctuation">\\</span>
   <span class="token parameter variable">-p</span> kubernetes.jobmanager.service-account<span class="token operator">=</span><span class="token operator">&lt;</span>self-defined-service-account<span class="token operator">&gt;</span> <span class="token punctuation">\\</span>
   <span class="token parameter variable">-p</span> <span class="token assign-left variable">kubernetes.container.image</span><span class="token operator">=</span><span class="token operator">&lt;</span>CustomImage<span class="token operator">&gt;</span> <span class="token punctuation">\\</span>
   <span class="token parameter variable">-p</span> <span class="token assign-left variable">kubernetes.jobmanager.cpu</span><span class="token operator">=</span><span class="token number">0.25</span> <span class="token punctuation">\\</span>
   <span class="token parameter variable">-p</span> <span class="token assign-left variable">kubernetes.taskmanager.cpu</span><span class="token operator">=</span><span class="token number">0.5</span> <span class="token punctuation">\\</span>
   --conf-in-base64 <span class="token operator">&lt;</span>base64 conf<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>User can specify more configurations by adding more <code>-p key=value</code> in bitsail command lines.</p><p>Configurations:</p><table><tr><th>Key</th><th>Required or Optional</th><th>Default</th><th>Type</th><th>Description</th></tr><tr><td>kubernetes.cluster-id</td><td>Optional</td><td>bitsail-&lt;instance-id&gt;</td><td>String</td><td>The cluster-id, which should be no more than 45 characters, is used for identifying a unique Flink cluster. If not set, the client will automatically generate it with a random numeric ID with &#39;bitsail-&#39; prefix.</td></tr><tr><td>kubernetes.cluster.jar.path</td><td>Optional</td><td>&quot;/opt/bitsail/bitsail-core.jar&quot;</td><td>String</td><td>The BitSail jar path in kubernetes cluster.</td></tr><tr><td>kubernetes.container.image</td><td>Required</td><td>The default value depends on the actually running version. In general it looks like &quot;flink:&lt;FLINK_VERSION&gt;-scala_&lt;SCALA_VERSION&gt;&quot;</td><td>String</td><td>Image to use for BitSail containers. The specified image must be based upon the same Apache Flink and Scala versions as used by the application. Visit https://hub.docker.com/_/flink?tab=tags for the images provided by the Flink project.</td></tr><tr><td>kubernetes.container.image.pull-policy</td><td>Optional</td><td>IfNotPresent</td><td>Enum. Possible values: [IfNotPresent, Always, Never]</td><td>The Kubernetes container image pull policy (IfNotPresent or Always or Never). The default policy is IfNotPresent to avoid putting pressure to image repository.</td></tr><tr><td>kubernetes.container.image.pull-secrets</td><td>Optional</td><td>(none)</td><td>List &lt;String&gt;</td><td>A semicolon-separated list of the Kubernetes secrets used to access private image registries.</td></tr><tr><td>kubernetes.hadoop.conf.config-map.name</td><td>Optional</td><td>(none)</td><td>String</td><td>Specify the name of an existing ConfigMap that contains custom Hadoop configuration to be mounted on the JobManager(s) and TaskManagers.</td></tr><tr><td>kubernetes.jobmanager.cpu</td><td>Optional</td><td>1.0</td><td>Double</td><td>The number of cpu used by job manager</td></tr><tr><td>kubernetes.jobmanager.service-account</td><td>Required</td><td>&quot;default&quot;</td><td>String</td><td>Service account that is used by jobmanager within kubernetes cluster. The job manager uses this service account when requesting taskmanager pods from the API server.</td></tr><tr><td>kubernetes.namespace</td><td>Optional</td><td>&quot;default&quot;</td><td>String</td><td>The namespace that will be used for running the jobmanager and taskmanager pods.</td></tr><tr><td>kubernetes.taskmanager.cpu</td><td>Optional</td><td>-1.0</td><td>Double</td><td>The number of cpu used by task manager. By default, the cpu is set to the number of slots per TaskManager</td></tr></table><h3 id="stop-application" tabindex="-1"><a class="header-anchor" href="#stop-application" aria-hidden="true">#</a> <span id="jump_stop_application">Stop Application</span></h3><p>Users can go to Flink WebUI to cancel running jobs.</p><p>Alternatively, users can run the following bitSail command to cancel a job.</p><p>Noted that</p><ul><li><code>&lt;jobId&gt;</code> can be retrieved from Flink JobManager, either from logs or WebUI.</li><li><code>&lt;cluster-id&gt;</code> can be retrieved from <code>kubectl get deployment</code></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl get deployment
<span class="token comment"># expected output</span>
NAME           READY   UP-TO-DATE   AVAILABLE   AGE
<span class="token operator">&lt;</span>cluster-id<span class="token operator">&gt;</span>   <span class="token number">1</span>/1     <span class="token number">1</span>            <span class="token number">1</span>           22s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">bash</span> <span class="token variable">\${BITSAIL_HOME}</span>/bin/bitsail stop <span class="token punctuation">\\</span>
   <span class="token parameter variable">--engine</span> flink <span class="token punctuation">\\</span>
   <span class="token parameter variable">--target</span> kubernetes-application <span class="token punctuation">\\</span>
   --deployment-mode kubernetes-application <span class="token punctuation">\\</span>
   --execution-mode cancel <span class="token punctuation">\\</span>
   <span class="token parameter variable">-p</span> kubernetes.cluster-id<span class="token operator">=</span><span class="token operator">&lt;</span>cluster-id<span class="token operator">&gt;</span> <span class="token punctuation">\\</span>
   --job-id <span class="token operator">&lt;</span>jobId<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If users want to delete the whole application, users can run <code>kubectl</code> commands to delete the whole deployment in order to stop the application</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl delete deployments bitsail-job
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="kubernetes-logs" tabindex="-1"><a class="header-anchor" href="#kubernetes-logs" aria-hidden="true">#</a> <span id="jump_kubernetes_logs">Kubernetes Logs</span></h3><p>There are three types of logs:</p><ol><li>BitSail client log: <code>\${FLINK_HOME}/log/flink-xxx.log</code> on client end</li><li>BitSail JobManager log: <code>/opt/flink/log/jobmanager.log</code> on Kubernetes JobManager pod</li><li>BitSail TaskManager log: <code>/opt/flink/log/taskmanager.log</code> on Kubernetes TaskManager pod</li></ol><p>If you want to use <code>kubectl logs &lt;PodName&gt;</code> to view the logs, you must perform the following:</p><ol><li>Add a new appender to the log4j.properties in the Flink client.</li><li>Add the following ‘appenderRef’ the rootLogger in log4j.properties <code>rootLogger.appenderRef.console.ref = ConsoleAppender</code>.</li><li>Stop and start your Application again. Now you could use kubectl logs to view your logs.</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Log all infos to the console</span>
appender.console.name <span class="token operator">=</span> ConsoleAppender
appender.console.type <span class="token operator">=</span> CONSOLE
appender.console.layout.type <span class="token operator">=</span> PatternLayout
appender.console.layout.pattern <span class="token operator">=</span> %d<span class="token punctuation">{</span>yyyy-MM-dd HH:mm:ss,SSS<span class="token punctuation">}</span> %-5p %-60c %x - %m%n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>User can dump JobManager/TaskManager logs on client end by running <code>kubectl</code> commands</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># During job running</span>
kubectl get pods <span class="token comment"># Will return jobmanager pod and taskmanager pod</span>

kubectl logs <span class="token parameter variable">-f</span> <span class="token operator">&lt;</span>jobmanagerPod<span class="token operator">&gt;</span> <span class="token comment"># Will dump jobManager log</span>

kubectl logs <span class="token parameter variable">-f</span> <span class="token operator">&lt;</span>taskmanagerPod<span class="token operator">&gt;</span>  <span class="token comment"># Will dump taskManager log</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="history-server" tabindex="-1"><a class="header-anchor" href="#history-server" aria-hidden="true">#</a> <span id="jump_history_server">History Server</span></h3>`,24),K={href:"https://nightlies.apache.org/flink/flink-docs-release-1.11/monitoring/historyserver.html",target:"_blank",rel:"noopener noreferrer"},$=t(`<p>Start or stop the HistoryServer</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token variable">\${FLINK_HOME}</span>/bin/historyserver.sh <span class="token punctuation">(</span>start<span class="token operator">|</span>start-foreground<span class="token operator">|</span>stop<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Run BitSail command line to configure history server.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">bash</span> <span class="token variable">\${BITSAIL_HOME}</span>/bin/bitsail run <span class="token punctuation">\\</span>
   <span class="token parameter variable">--engine</span> flink <span class="token punctuation">\\</span>
   <span class="token parameter variable">--target</span> kubernetes-application <span class="token punctuation">\\</span>
   --deployment-mode kubernetes-application <span class="token punctuation">\\</span>
   --execution-mode run-application <span class="token punctuation">\\</span>
   <span class="token parameter variable">-p</span> kubernetes.cluster-id<span class="token operator">=</span><span class="token operator">&lt;</span>cluster-id<span class="token operator">&gt;</span> <span class="token punctuation">\\</span>
   <span class="token parameter variable">-p</span> kubernetes.jobmanager.service-account<span class="token operator">=</span><span class="token operator">&lt;</span>self-defined-service-account<span class="token operator">&gt;</span> <span class="token punctuation">\\</span>
   <span class="token parameter variable">-p</span> <span class="token assign-left variable">kubernetes.container.image</span><span class="token operator">=</span><span class="token operator">&lt;</span>CustomImage<span class="token operator">&gt;</span> <span class="token punctuation">\\</span>
   <span class="token parameter variable">-p</span> <span class="token assign-left variable">kubernetes.jobmanager.cpu</span><span class="token operator">=</span><span class="token number">0.25</span> <span class="token punctuation">\\</span>
   <span class="token parameter variable">-p</span> <span class="token assign-left variable">kubernetes.taskmanager.cpu</span><span class="token operator">=</span><span class="token number">0.5</span> <span class="token punctuation">\\</span>
   <span class="token parameter variable">-p</span> <span class="token assign-left variable">jobmanager.archive.fs.dir</span><span class="token operator">=</span>hdfs:///completed-jobs/ <span class="token punctuation">\\</span>
   <span class="token parameter variable">-p</span> <span class="token assign-left variable">historyserver.web.address</span><span class="token operator">=</span><span class="token number">0.0</span>.0.0 <span class="token punctuation">\\</span>
   <span class="token parameter variable">-p</span> historyserver.web.port <span class="token number">8082</span> <span class="token punctuation">\\</span>
   <span class="token parameter variable">-p</span> historyserver.archive.fs.dir hdfs:///completed-jobs/ <span class="token punctuation">\\</span>
   <span class="token parameter variable">-p</span> historyserver.archive.fs.refresh-interval <span class="token number">10000</span> <span class="token punctuation">\\</span>
   --conf-in-base64 <span class="token operator">&lt;</span>base64 conf<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function U(J,Y){const o=i("RouterLink"),s=i("ExternalLinkIcon");return l(),p("div",null,[u,a("p",null,[e("English | "),n(o,{to:"/zh/documents/start/deployment.html"},{default:c(()=>[e("简体中文")]),_:1})]),m,a("ol",null,[b,a("li",null,[a("p",null,[e("Set "),h,e(" targeting to the hadoop dir in deploy environment. The "),a("a",k,[e("bitsail"),n(s)]),e(" scripts will use the following command to generate "),v,e(".")])])]),g,a("p",null,[e("After packaging, the project production contains a file "),a("a",f,[e("conf/bitsail.conf"),n(s)]),e(". This file describes the system configuration of deployment environment, including the flink path and some other default parameters.")]),_,a("p",null,[e("Users can use commands "),y,e(" to submit a BitSail job to remote flink session. Use "),a("a",x,[e("examples/Fake_Print_Example.json"),n(s)]),e(" as example to start a BitSail job:")]),j,a("p",null,[e("Users can use commands "),S,e(" to run a BitSail job locally. Use "),a("a",w,[e("examples/Fake_Print_Example.json"),n(s)]),e(" as example to start a BitSail job:")]),A,a("p",null,[e("Take "),a("a",T,[e("examples/Fake_hive_Example.json"),n(s)]),e(" as another example:")]),P,a("p",null,[e("If you have problems setting up a Kubernetes cluster, then take a look at "),a("a",q,[e("how to setup a Kubernetes cluster"),n(s)]),e(".")]),I,a("p",null,[e("Role-based access control ("),a("a",O,[e("RBAC"),n(s)]),e(") is a method of regulating access to compute or network resources based on the roles of individual users within an enterprise. Users can configure RBAC roles and service accounts used by JobManager to access the Kubernetes API server within the Kubernetes cluster.")]),H,a("p",null,[e("Application mode allows users to create a single image containing their Job and the Flink runtime, which will automatically create and destroy cluster components as needed. The Flink community provides base docker images "),a("a",F,[e("customized"),n(s)]),e(" for any use case.")]),E,a("p",null,[e("Build your "),M,e(" using the "),a("a",B,[C,n(s)]),e(" from "),L,e(":")]),R,a("p",null,[a("a",D,[e("How to create and manage docker repositories."),n(s)])]),N,a("p",null,[e("Flink has a history server that can be used to query the statistics of completed jobs after the corresponding Flink cluster has been shut down. Furthermore, it exposes a REST API that accepts HTTP requests and responds with JSON data. More information in "),a("a",K,[e("https://nightlies.apache.org/flink/flink-docs-release-1.11/monitoring/historyserver.html"),n(s)])]),$])}const z=r(d,[["render",U],["__file","deployment.html.vue"]]);export{z as default};
