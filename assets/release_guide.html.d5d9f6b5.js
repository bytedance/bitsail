import{_ as t}from"./release_procedure.a12f0fbe.js";import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as d,c as l,a,b as e,d as i,w as c,e as h,r}from"./app.416da474.js";const u={},p=a("h1",{id:"bitsail-release-guide",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#bitsail-release-guide","aria-hidden":"true"},"#"),e(" BitSail Release Guide")],-1),m=h(`<hr><h2 id="procedure-to-submit-a-pull-request" tabindex="-1"><a class="header-anchor" href="#procedure-to-submit-a-pull-request" aria-hidden="true">#</a> Procedure to submit a pull request</h2><p>SOP to submit a new commit</p><ol><li>Create a Github issue or claim an existing issue</li><li>Describe what you would like to do in the issue description.</li><li>Include the issue number in the commit message. The format follows below.</li></ol><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>[BitSail#\${IssueNumber}][\${Module}] Description
[BitSail#1234][Connector] Improve reader split algorithm to Kudu source connector

//For Minor change
[Minor] Description
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>List of module. Chose the most related one if your changes affect multiple modules. e.g. If you are adding a feature to kafka connector and end up modifying code in common, components and cores, you should still use the [Connector] as module name.</li></ol><div class="language-Plain line-numbers-mode" data-ext="Plain"><pre class="language-Plain"><code>[Common] bitsail-common
[Core] base client component cores
[Connector] all connector related changes
[Doc] documentation or java doc changes
[Build] build, dependency changes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="procedure-to-release" tabindex="-1"><a class="header-anchor" href="#procedure-to-release" aria-hidden="true">#</a> Procedure to release</h2><p><img src="`+t+'" alt="img" loading="lazy"></p><h3 id="_1-decide-to-release" tabindex="-1"><a class="header-anchor" href="#_1-decide-to-release" aria-hidden="true">#</a> 1. Decide to release</h3><p>Because we don&#39;t have many users subscribed to the mailing list for now. Using Github issue to discuss release related topic should have better visibility.</p><p>We could start a new discussion on Github with topics like</p><p><code>0.1.0</code> Release Discussion</p><p>Deciding to release and selecting a Release Manager is the first step of the release process. This is a consensus-based decision of the entire community.</p><p>Anybody can propose a release on the Github issue, giving a solid argument and nominating a committer as the Release Manager (including themselves). There’s no formal process, no vote requirements, and no timing requirements. Any objections should be resolved by consensus before starting the release.</p><h3 id="_2-prepare-for-the-relase" tabindex="-1"><a class="header-anchor" href="#_2-prepare-for-the-relase" aria-hidden="true">#</a> 2. Prepare for the relase</h3><p>A. Triage release-blocking issues</p><p>B. Review and update documentation</p><p>C. Cross team testing</p><p>D. Review Release Notes</p><p>E. Verify build and tests</p><p>F. Create a release branch</p><p>G. Bump the version of the master</p><h3 id="_3-build-a-release-candidate" tabindex="-1"><a class="header-anchor" href="#_3-build-a-release-candidate" aria-hidden="true">#</a> 3. Build a release candidate</h3><p>Since we don&#39;t have a maven central access for now, we will build a release candidate on github and let other users test it.</p><p>A. Add git release tag</p><p>B. Publish on Github for the public to download</p><h3 id="_4-vote-on-the-release-candidate" tabindex="-1"><a class="header-anchor" href="#_4-vote-on-the-release-candidate" aria-hidden="true">#</a> 4. Vote on the release candidate</h3><p>Once the release branch is ready and release candidate is available on Github. The release manager will ask other committers to test the release candidate and start a vote on corresponding Github Issue. We need 3 blinding votes from PMC members at least.</p><h3 id="_5-fix-issue" tabindex="-1"><a class="header-anchor" href="#_5-fix-issue" aria-hidden="true">#</a> 5. Fix issue</h3><p>Any issues identified during the community review and vote should be fixed in this step.</p><p>Code changes should be proposed as standard pull requests to the master branch and reviewed using the normal contributing process. Then, relevant changes should be cherry-picked into the release branch. The cherry-pick commits should then be proposed as the pull requests against the release branch, again reviewed and merged using the normal contributing process.</p><p>Once all issues have been resolved, you should go back and build a new release candidate with these changes.</p><h3 id="_6-finalize-the-release" tabindex="-1"><a class="header-anchor" href="#_6-finalize-the-release" aria-hidden="true">#</a> 6. Finalize the release</h3><p>Once the release candidate passes the voting, we could finalize the release.</p><p>A. Change the release branch version from <code>x.x.x-rc1</code> to <code>x.x.x</code>. e.g. <code>0.1.0-rc1</code> to <code>0.1.0</code></p><p>B. <code>git commit -am &quot;[MINOR] Update release version to reflect published version ${RELEASE_VERSION}&quot;</code></p><p>C. Push to the release branch</p><p>D. Resolve related Github issues</p><p>E. Create a new Github release, off the release version tag, you pushed before</p><h3 id="_7-promote-the-release" tabindex="-1"><a class="header-anchor" href="#_7-promote-the-release" aria-hidden="true">#</a> 7. Promote the release</h3><p>24 hours after we publish the release, promote the release on all the community channels, including WeChat, slack, mailing list.</p><h3 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference:</h3>',43),b={href:"https://cwiki.apache.org/confluence/display/FLINK/Creating+a+Flink+Release",target:"_blank",rel:"noopener noreferrer"},g={href:"https://cwiki.apache.org/confluence/display/HUDI/Apache+Hudi+-+Release+Guide",target:"_blank",rel:"noopener noreferrer"};function f(v,_){const n=r("RouterLink"),s=r("ExternalLinkIcon");return d(),l("div",null,[p,a("p",null,[e("English | "),i(n,{to:"/zh/community/release_guide.html"},{default:c(()=>[e("简体中文")]),_:1})]),m,a("p",null,[e("Flink release guide: "),a("a",b,[e("Creating a Flink Release"),i(s)])]),a("p",null,[e("Hudi release guide: "),a("a",g,[e("Apache Hudi Release Guide"),i(s)])])])}const k=o(u,[["render",f],["__file","release_guide.html.vue"]]);export{k as default};
